@using Minible5.Models.ViewModels
@model Minible5.Models.ViewModels.EditUserViewModel
@{
    ViewBag.Title = "Detalle Usuario";
    ViewBag.pTitle = "Detalle Usuario";
    ViewBag.pageTitle = "Usuarios";
    Layout = "~/Views/_Shared/_Layout.cshtml";
    List<SelectListItem> items = (List<SelectListItem>)ViewBag.items;
    List<SelectListItem> companies = (List<SelectListItem>)ViewBag.companies;
    List<DDCompanies> userCompanies = (List<DDCompanies>)ViewBag.userCompanies;
}

<!-- plugin css -->
<link href="~/assets/libs/select2/css/select2.min.css" rel="stylesheet" type="text/css" />
<!-- Sweet Alert-->
<link href="~/assets/libs/sweetalert2/sweetalert2.min.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" type="text/css" href="~/assets/libs/toastr/build/toastr.min.css">
<!-- dropzone css -->
<link href="~/assets/libs/dropzone/min/dropzone.min.css" rel="stylesheet" type="text/css" />

@using (Html.BeginForm("Edit", "Users", FormMethod.Post, new { role = "form", @class = "needs-validation ", Novalidate = true }))
{
    <div class="row">
        <div class="col-lg-12">
            <div id="addproduct-accordion" class="custom-accordion">
                <div class="card">
                    <a href="#addproduct-billinginfo-collapse" class="text-dark" data-bs-toggle="collapse" aria-expanded="true" aria-controls="addproduct-billinginfo-collapse">
                        <div class="p-4">

                            <div class="media align-items-center">
                                <div class="me-3">
                                    <div class="avatar-xs">
                                        <div class="avatar-title rounded-circle bg-soft-primary text-primary">
                                            01
                                        </div>
                                    </div>
                                </div>
                                <div class="media-body overflow-hidden">
                                    <h5 class="font-size-16 mb-1">Información del usuario</h5>
                                    <p class="text-muted text-truncate mb-0">Llena el formulario con los datos personales del usuario.</p>
                                </div>
                                <i class="mdi mdi-chevron-up accor-down-icon font-size-24"></i>
                            </div>

                        </div>
                    </a>

                    <div id="addproduct-billinginfo-collapse" class="collapse show" data-bs-parent="#addproduct-accordion">
                        <div class="p-4 border-top">
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(d => d.Id)

                            <div class="text-danger mb-3 row">
                                @Html.ValidationSummary(false)
                            </div>

                            <div class="mb-3 row">
                                @Html.LabelFor(d => d.Name, new { @class = "col-md-2 col-form-label" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(d => d.Name, new { @class = "form-control", placeholder = "Name" })
                                </div>
                            </div>
                            <div class="mb-3 row">
                                @Html.LabelFor(d => d.UserName, new { @class = "col-md-2 col-form-label" })
                                <div class="col-md-10">
                                    <div class="input-group has-validation">
                                        <span class="input-group-text" id="inputGroupPrepend">&#64;</span>
                                        @Html.TextBoxFor(d => d.UserName, new { @class = "form-control", placeholder = "Username", Required = true })
                                        <div class="invalid-feedback">
                                            Porfavor, ingrese el nombre de usuario.
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3 row">
                                @Html.LabelFor(d => d.Email, new { @class = "col-md-2 col-form-label" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(d => d.Email, new { @class = "form-control", placeholder = "myemail@example.com", type = "email", Required = true })
                                    <div class="invalid-feedback">
                                        Porfavor, ingrese el email del usuario.
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3 row">
                                @Html.LabelFor(d => d.Password, new { @class = "col-md-2 col-form-label" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(d => d.Password, new { @class = "form-control", placeholder = "Password", type = "password", Required = true })
                                    <div class="invalid-feedback">
                                        Porfavor, ingrese la contraseña de usuario.
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3 row">
                                @Html.LabelFor(d => d.ConfirmPassword, new { @class = "col-md-2 col-form-label" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(d => d.ConfirmPassword, new { @class = "form-control", placeholder = "Confirm Password", type = "password", Required = true })
                                    <div class="invalid-feedback">
                                        Porfavor, ingrese la contraseña de usuario.
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3 row">
                                @Html.LabelFor(d => d.Group, new { @class = "col-md-2 col-form-label" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(d => d.Group, items, "Seleccione el grupo", new { @class = "form-control select2", Required = true })
                                    <div class="invalid-feedback">
                                        Porfavor, ingrese el grupo del usuario.
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3 row">
                                @Html.LabelFor(d => d.Active, new { @class = "col-md-2 col-form-label" })
                                <div class="col-md-10 form-check form-switch form-switch-md">
                                    @Html.CheckBoxFor(d => d.Active, new { @class = "form-check-input", type = "checkbox", Checked = true })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <a href="#addproduct-metadata-collapse" class="text-dark collapsed" data-bs-toggle="collapse" aria-haspopup="true" aria-expanded="false" aria-haspopup="true" aria-controls="addproduct-metadata-collapse">
                        <div class="p-4">

                            <div class="media align-items-center">
                                <div class="me-3">
                                    <div class="avatar-xs">
                                        <div class="avatar-title rounded-circle bg-soft-primary text-primary">
                                            02
                                        </div>
                                    </div>
                                </div>
                                <div class="media-body overflow-hidden">
                                    <h5 class="font-size-16 mb-1">Empresas del usuario</h5>
                                    <p class="text-muted text-truncate mb-0">Selecciona las empresas donde el usuario tendrá acceso.</p>
                                </div>
                                <i class="mdi mdi-chevron-up accor-down-icon font-size-24"></i>
                            </div>

                        </div>
                    </a>

                    <div id="addproduct-metadata-collapse" class="collapse" data-bs-parent="#addproduct-accordion">
                        <div class="p-4 border-top">
                            <div class="table-responsive">
                                <table class="table table-editable table-nowrap align-middle table-edits">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Empresa</th>
                                            <th>Acción</th>
                                        </tr>
                                    </thead>
                                    <tbody id="cuerpoDetalle">
                                        <tr>
                                            <td>
                                                #
                                            </td>
                                            <td>
                                                @Html.DropDownList("empresas", companies, "Seleccione la empresa", new { @class = "form-control", Required = true })
                                                <div class="invalid-feedback">
                                                    Porfavor, ingrese una empresa válida.
                                                </div>
                                            </td>
                                            <td>
                                                <button onclick="addRow()" type="button" class="btn btn-success waves-effect waves-light"><i class="mdi mdi-plus me-1"></i> Agregar Empresa</button>
                                            </td>
                                        </tr>
                                        @if (userCompanies != null)
                                        {
                                            foreach (var userCompany in userCompanies)
                                            {
                                                <tr id="empresa-@userCompany.CodigoEmpresa">
                                                    <td>
                                                        @userCompany.CodigoEmpresa
                                                    </td>
                                                    <td>
                                                        @userCompany.Name
                                                    </td>
                                                    <td>
                                                        <a class="px-3 text-danger" title="delete" href="javascript: void(0);"
                                                           onclick="deleteRow('@userCompany.CodigoEmpresa')">
                                                            <i class="uil uil-trash-alt font-size-18"></i>
                                                        </a>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- end row -->

    <div id="hiddenEmpresas"></div>

    <div class="row mb-4">
        <div class="col text-end">
            <a href="@Url.Action("Index", "Users")" class="btn btn-danger"> <i class="uil uil-times me-1"></i> Cancelar </a>
            <button type="submit" class="btn btn-success"> <i class="uil uil-file-alt me-1"></i> Guardar </button>
        </div> <!-- end col -->
    </div> <!-- end row-->
}

<!-- JAVASCRIPT -->
<script src="~/assets/libs/jquery/jquery.min.js"></script>
<script src="~/assets/libs/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="~/assets/libs/metismenu/metisMenu.min.js"></script>
<script src="~/assets/libs/simplebar/simplebar.min.js"></script>
<script src="~/assets/libs/node-waves/waves.min.js"></script>
<script src="~/assets/libs/waypoints/lib/jquery.waypoints.min.js"></script>
<script src="~/assets/libs/jquery.counterup/jquery.counterup.min.js"></script>
<script src="~/assets/js/app.js"></script>

<!-- plugins -->
<script src="~/assets/libs/select2/js/select2.min.js"></script>

<!-- Sweet Alerts js -->
<script src="~/assets/libs/sweetalert2/sweetalert2.min.js"></script>

<!-- toastr plugin -->
<script src="~/assets/libs/toastr/build/toastr.min.js"></script>

<!-- Table Editable plugin -->
<script src="~/assets/libs/table-edits/build/table-edits.min.js"></script>

<script>
    $(document).ready(function () { $("#Group").select2(); });
    $(document).ready(function () { $("#empresas").select2(); });

    let num = 0

    toastr.options = {
        "closeButton": false,
        "debug": false,
        "newestOnTop": false,
        "progressBar": true,
        "positionClass": "toast-top-center",
        "preventDuplicates": false,
        "onclick": null,
        "showDuration": 300,
        "hideDuration": 1000,
        "timeOut": 5000,
        "extendedTimeOut": 1000,
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    }

    function addRow() {
        //validaciones
        let empresa = $('#empresas').select2('data')
        document.getElementById("empresas").classList.remove("is-invalid")
        if (document.getElementById("empresas").selectedIndex == 0 || document.getElementById("empresa-" + empresa[0].id) != null) {
            document.getElementById("empresas").classList.add("is-invalid")
            return
        }
        //Ingreso de data a la tabla
        let body = document.getElementById("cuerpoDetalle")
        let TR = document.createElement("tr")

        let TDid = document.createElement("td")
        let TDname = document.createElement("td")
        let TDaction = document.createElement("td")

        TDid.innerHTML = empresa[0].id;
        TDname.innerHTML = empresa[0].text;
        let a = document.createElement("a")
        let i = document.createElement("i")
        i.setAttribute("class", "uil uil-trash-alt font-size-18")
        a.appendChild(i)
        a.setAttribute("class", "px-3 text-danger")
        a.setAttribute("title", "delete")
        a.setAttribute("href", "javascript: void (0);")
        a.setAttribute("onclick", "deleteRow('" + empresa[0] + "')")
        TDaction.appendChild(a)

        TR.appendChild(TDid)
        TR.appendChild(TDname)
        TR.appendChild(TDaction)
        TR.setAttribute("id", "empresa-" + empresa[0].id)

        body.appendChild(TR)

        //AHORA LOS HIDDENS
        let DivEmpresas = document.getElementById("hiddenEmpresas")
        let HiddenIndex = document.createElement("input")
        let HiddenCodigoEmpresa = document.createElement("input")
        let HiddenUpdate = document.createElement("input")
        HiddenIndex.name = "Empresas.Index"
        HiddenIndex.value = num
        HiddenIndex.type = "hidden"
        HiddenCodigoEmpresa.name = "Empresas[" + num + "].CodigoEmpresa"
        HiddenCodigoEmpresa.id = "Empresas[" + num + "].CodigoEmpresa"
        HiddenCodigoEmpresa.value = empresa[0].id
        HiddenCodigoEmpresa.type = "hidden"
        HiddenUpdate.name = "Empresas[" + num + "].Update"
        HiddenUpdate.id = "Empresas[" + num + "].Update"
        HiddenUpdate.value = "Agregado"
        HiddenUpdate.type = "hidden"
        DivEmpresas.appendChild(HiddenIndex)
        DivEmpresas.appendChild(HiddenCodigoEmpresa)
        DivEmpresas.appendChild(HiddenUpdate)
        num++
    }

    async function addRow2() {
        //validaciones
        let empresa = $('#empresas').select2('data')
        document.getElementById("empresas").classList.remove("is-invalid")
        if (document.getElementById("empresas").selectedIndex == 0 || document.getElementById("empresa-" + empresa[0].id) != null) {
            document.getElementById("empresas").classList.add("is-invalid")
            return
        }

        //Ingresamos a la base de datos con fetch
        let userId = document.getElementById("Id").value;
        let codigoEmpresa = empresa[0].id;
        let url = "@Url.Content("~/Users/addCompany")"
        let error = false
        var userCompanyId
        await fetch(url, {
            method: "POST",
            body: JSON.stringify({
                userId: userId,
                codigoEmpresa: codigoEmpresa
            }),
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
            }
        }).then(function (response) {
            if (response.ok) {
                return response.text()
            } else {
                toastr["error"]("Error de conexion", "Error")
                error = true
            }
        }).then(function (Data) {
            var obj = JSON.parse(Data)
            if (obj.success == false) {
                toastr["error"](obj.error, "Error")
                error = true
            } else {
                userCompanyId = obj.userCompanyId
            }
        })
        if (error) {
            return
        }

        //Ingreso de data a la tabla
        let body = document.getElementById("cuerpoDetalle")
        let TR = document.createElement("tr")

        let TDid = document.createElement("td")
        let TDname = document.createElement("td")
        let TDaction = document.createElement("td")

        TDid.innerHTML = empresa[0].id;
        TDname.innerHTML = empresa[0].text;
        let a = document.createElement("a")
        let i = document.createElement("i")
        i.setAttribute("class", "uil uil-trash-alt font-size-18")
        a.appendChild(i)
        a.setAttribute("class", "px-3 text-danger")
        a.setAttribute("title", "delete")
        a.setAttribute("href", "javascript: void (0);")
        a.setAttribute("onclick", "deleteRow(" + userCompanyId  + ")")
        TDaction.appendChild(a)

        TR.appendChild(TDid)
        TR.appendChild(TDname)
        TR.appendChild(TDaction)
        TR.setAttribute("id", "empresa-" + empresa[0].id)

        body.appendChild(TR)
    }

    function deleteRow(codigoEmpresa) {
        //AHORA LOS HIDDENS
        let DivEmpresas = document.getElementById("hiddenEmpresas")
        let HiddenIndex = document.createElement("input")
        let HiddenCodigoEmpresa = document.createElement("input")
        let HiddenUpdate = document.createElement("input")
        HiddenIndex.name = "Empresas.Index"
        HiddenIndex.value = num
        HiddenIndex.type = "hidden"
        HiddenCodigoEmpresa.name = "Empresas[" + num + "].codigoEmpresa"
        HiddenCodigoEmpresa.value = empresa[0].id
        HiddenCodigoEmpresa.type = "hidden"
        HiddenCodigoEmpresa.id = "Empresa" + empresa[0].id
        HiddenUpdate.name = "Empresas[" + num + "].update"
        HiddenUpdate.value = "Eliminado"
        HiddenUpdate.type = "hidden"
        DivEmpresas.appendChild(HiddenIndex)
        DivEmpresas.appendChild(HiddenCodigoEmpresa)
        DivEmpresas.appendChild(HiddenUpdate)
        num++
        //Ahora eliminamos
        document.getElementById("empresa-" + codigoEmpresa).remove()
    }

    function deleteRow2(userCompanyId) {
        Swal.fire({
            title: "Estas seguro?", text: "Puedes agregar nuevamente la empresa!", icon: "warning", showCancelButton: !0, confirmButtonText: "Si, Eliminar!", cancelButtonText: "No, Cancelar!", confirmButtonClass: "btn btn-success mt-2", cancelButtonClass: "btn btn-danger ms-2 mt-2", buttonsStyling: !1
        }).then(async function (t) {
            if (t.value) {
                //SI CONFIRMA
                let url = "@Url.Content("~/Users/deleteCompany")"
                let error = false
                var codigoEmpresa
                await fetch(url, {
                    method: "POST",
                    body: JSON.stringify({
                        userCompanyId: userCompanyId
                    }),
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    }
                }).then(function (response) {
                    if (response.ok) {
                        return response.text()
                    } else {
                        toastr["error"]("Error de conexion", "Error")
                        error = true
                    }
                }).then(function (Data) {
                    var obj = JSON.parse(Data)
                    if (obj.success == false) {
                        toastr["error"](obj.error, "Error")
                        error = true
                    } else {
                        codigoEmpresa = obj.codigoEmpresa
                    }
                })
                if (error) {
                    return
                }
                document.getElementById("empresa-" + codigoEmpresa).remove()
                Swal.fire({ title: "Eliminado!", text: "La empresa del usuario ha sido eliminada.", icon: "success" })
            } else {
                //SI CANCELA
                t.dismiss === Swal.DismissReason.cancel && Swal.fire({ title: "Cancelado", text: "La empresa del usuario no se ha eliminado :)", icon: "error" })
            }
        })
    }
</script>